@namespace webenology.blazor.components
@typeparam TItem

@using Microsoft.AspNetCore.Components.Web.Virtualization

<div class="@Style.ContainerCss">
    @if (!string.IsNullOrEmpty(Label))
    {
    <label class="@Style.LabelCss">@Label</label>
    }

    <OutsideClick OnOutsideClick="closeItemsWindow">
        <div class="@Style.InputGroupCss">
            <input placeholder="@PlaceHolder" type="text" @attributes="@_attributes" class="@InputCss()" @bind="LocalText" @bind:event="oninput" @onkeyup="onKeyPress" @onclick="openItemsWindow" @ref="_elRef" />
            @if (ShowRemoveButton && !string.IsNullOrEmpty(_localText))
            {
            <div class="@Style.RemoveIconContainerCss">
                <i class="@Style.RemoveIconCss" @onclick="clearItem"></i>
            </div>
            }
            <div class="@Style.ChevronContainerCss" @onclick="toggleItemsWindows">
                <i class="@Style.ChevronIconCss"></i>
            </div>
        </div>
        @if (_isError)
        {
        <label class="@Style.ErrorCss">
            @_errorMessage
        </label>
        }
        <div class="@ListGroupCss()" style="top: calc(100%@(_isError ? " - 24px" :""));">
            <div style="max-height: @(Math.Clamp(MaxItemsToShow * ItemHeight, ItemHeight*4, ItemHeight*8))px; overflow-y: auto" @ref="_scrollEl">
                <Virtualize TItem="TItem" ItemsProvider="GetSearchedItems" @ref="_virtualized" OverscanCount="0" Context="itm">
                    @if (SearchedItems.Count == 1)
                    {
                        _currentFocused = 0;
                    }
                    <a class="@ListGroupItemCss(_currentFocused == SearchedItems.IndexOf(itm))" @onclick="@(()=> onSelectItem(itm))" @onclick:preventDefault href="javascript:;" style="height: @($"{ItemHeight}px");">@((MarkupString)SearchHelper.HighlightSearchResult(_localText, GetValue(itm)))</a>
                </Virtualize>
            </div>
            @if (!SearchedItems.Any())
            {
            <div class="@Style.ItemNotFoundCss">
                No Matches Found
            </div>
            }
            @if (CanAddNewItem && !ExactMatch())
            {
            <div class="@Style.AddNewContainerCss" @onclick="onAddNewItem">
                <i class="@Style.AddNewIconCss"></i>
                <b>Ctrl + Enter</b> to create @(string.IsNullOrEmpty(_localText) ? "a": $"\"{_localText}\" as a") new @(string.IsNullOrEmpty(NewTypeName)? "item": NewTypeName)
            </div>
            }
        </div>
    </OutsideClick>
</div>
